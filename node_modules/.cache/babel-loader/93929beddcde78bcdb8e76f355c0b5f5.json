{"ast":null,"code":"var _jsxFileName = \"/home/sawi/Documents/My Apps and Sites/simplecalculator-react/src/App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport Button from './components/Button';\nimport Monitor from './components/Monitor';\n\nconst App = () => {\n  const buttonTexts = [{\n    value: '6',\n    type: 'number'\n  }, {\n    value: '7',\n    type: 'number'\n  }, {\n    value: '8',\n    type: 'number'\n  }, {\n    value: '9',\n    type: 'number'\n  }, {\n    value: '5',\n    type: 'number'\n  }, {\n    value: '4',\n    type: 'number'\n  }, {\n    value: '3',\n    type: 'number'\n  }, {\n    value: '2',\n    type: 'number'\n  }, {\n    value: '1',\n    type: 'number'\n  }, {\n    value: '0',\n    type: 'number'\n  }, {\n    value: 'AC',\n    type: 'delete'\n  }, {\n    value: '+',\n    type: 'operator'\n  }, {\n    value: '-',\n    type: 'operator'\n  }, {\n    value: '*',\n    type: 'operator'\n  }, {\n    value: '/',\n    type: 'operator'\n  }, {\n    value: 'Enter',\n    type: 'enter'\n  }, {\n    value: '.',\n    type: 'decimal'\n  }];\n  const [monitorText, setMonitorText] = useState('');\n  const [number1, setNumber1] = useState(0);\n  const [operator, setOperator] = useState('');\n  const [decimalCount, setDecimalCount] = useState(0);\n  const [enterCount, setEnterCount] = useState(0);\n  const [currentNumber, setCurrentNumber] = useState('0');\n\n  const fnCurrentNumber = value => {\n    let newNumber;\n\n    if (currentNumber !== '0') {\n      newNumber = currentNumber + value.toString();\n\n      if (enterCount !== 0) {\n        setEnterCount(0);\n      }\n    } else {\n      newNumber = value.toString();\n    }\n\n    setCurrentNumber(newNumber);\n    setMonitorText(newNumber);\n    console.log(currentNumber);\n  };\n\n  const fnDecimal = value => {\n    if (decimalCount === 0) {\n      let newNumber;\n      setDecimalCount(1);\n      enterCount !== 0 ? newNumber = '0' + value.toString() : newNumber = currentNumber + value.toString();\n      setCurrentNumber(newNumber);\n      setMonitorText(newNumber);\n      console.log(newNumber);\n    }\n  };\n\n  const fnOpertor = value => {\n    setNumber1(currentNumber);\n    setOperator(value);\n    setCurrentNumber('0');\n    setDecimalCount(0);\n    setMonitorText(value);\n  };\n\n  const fnCalculation = () => {\n    if (operator !== '') {\n      let number2 = parseFloat(currentNumber);\n      console.log(number1);\n      console.log(number2);\n      console.log(operator);\n      let total = 0;\n\n      switch (operator) {\n        case \"+\":\n          total = parseFloat(number1) + parseFloat(number2);\n          break;\n\n        case \"-\":\n          total = number1 - number2;\n          break;\n\n        case \"*\":\n          total = number1 * number2;\n          break;\n\n        case \"/\":\n          if (number2 != 0) {\n            total = number1 / number2;\n          } else {\n            window.alert()(\"The number can not be devided by 0\");\n          }\n\n          break;\n      }\n\n      setCurrentNumber(total);\n      setNumber1(total);\n      setOperator('');\n      setDecimalCount(0);\n      setEnterCount(1);\n      setMonitorText(total);\n    }\n  };\n\n  const onClickTask = (type, value) => {\n    switch (type) {\n      case 'number':\n        fnCurrentNumber(value);\n        break;\n\n      case 'decimal':\n        fnDecimal(value);\n        break;\n\n      case 'operator':\n        fnOpertor(value);\n        break;\n\n      case 'enter':\n        fnCalculation();\n        break;\n\n      case 'delete':\n        fnCalculation();\n        break;\n    }\n  };\n\n  const renderButtons = buttonTexts.map((obj, index) => /*#__PURE__*/React.createElement(Button, {\n    key: index,\n    value: obj.value,\n    type: obj.type,\n    onClickTask: onClickTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 54\n    }\n  }));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calculator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Monitor, {\n    display: monitorText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ui inverted segment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, renderButtons)));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/sawi/Documents/My Apps and Sites/simplecalculator-react/src/App.js"],"names":["React","useState","Button","Monitor","App","buttonTexts","value","type","monitorText","setMonitorText","number1","setNumber1","operator","setOperator","decimalCount","setDecimalCount","enterCount","setEnterCount","currentNumber","setCurrentNumber","fnCurrentNumber","newNumber","toString","console","log","fnDecimal","fnOpertor","fnCalculation","number2","parseFloat","total","window","alert","onClickTask","renderButtons","map","obj","index"],"mappings":"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","sourcesContent":["import React , { useState }from 'react';\nimport './App.css';\nimport Button from './components/Button';\nimport Monitor from './components/Monitor';\n\nconst App = () => {\n  const buttonTexts = [\n    {value: '6', type: 'number'}, \n    {value: '7', type: 'number'}, \n    {value: '8', type: 'number'}, \n    {value: '9', type: 'number'}, \n    {value: '5', type: 'number'}, \n    {value: '4', type: 'number'}, \n    {value: '3', type: 'number'}, \n    {value: '2', type: 'number'}, \n    {value: '1', type: 'number'}, \n    {value: '0', type: 'number'}, \n    {value: 'AC', type: 'delete'}, \n    {value: '+', type: 'operator'}, \n    {value: '-', type: 'operator'}, \n    {value: '*', type: 'operator'}, \n    {value: '/', type: 'operator'}, \n    {value: 'Enter', type: 'enter'}, \n    {value: '.', type: 'decimal'}\n  ]\n\n  const [monitorText, setMonitorText] = useState('');\n  const [number1, setNumber1] = useState(0);\n  const [operator, setOperator] = useState('');\n  const [decimalCount, setDecimalCount] = useState(0);\n  const [enterCount, setEnterCount] = useState(0);\n  const [currentNumber, setCurrentNumber] = useState('0');\n\n  const fnCurrentNumber = value =>{\n    let newNumber;\n    if(currentNumber !== '0'){\n      newNumber = currentNumber + value.toString();\n      if(enterCount !== 0){setEnterCount(0)}\n    }else{newNumber=value.toString()}\n\n    setCurrentNumber(newNumber);\n    setMonitorText(newNumber);\n\n    console.log(currentNumber)\n  };\n  const fnDecimal = value => {\n    if(decimalCount === 0){\n      let newNumber;\n      setDecimalCount(1);\n\n      enterCount !== 0 ? newNumber = '0' + value.toString()\n      :newNumber = currentNumber + value.toString()\n\n      setCurrentNumber(newNumber);\n      setMonitorText(newNumber);\n      console.log(newNumber)\n    }\n  };\n  const fnOpertor = value => {\n    setNumber1(currentNumber);\n    setOperator(value);\n    setCurrentNumber('0');\n    setDecimalCount(0);\n    setMonitorText(value);\n  };\n  const fnCalculation = () => {\n    if(operator !== ''){\n      let number2 = parseFloat(currentNumber);\n      console.log(number1)\n      console.log(number2)\n      console.log(operator)\n      let total=0;\n      switch(operator){\n        case \"+\": total = parseFloat(number1) + parseFloat(number2);break;\n        case \"-\": total = number1 - number2;break;\n        case \"*\": total = number1 * number2;break;\n        case \"/\": if(number2!= 0){total = number1 / number2;}\n                  else{window.alert()(\"The number can not be devided by 0\");} break;\n      }\n      setCurrentNumber(total);\n      setNumber1(total);\n      setOperator('');\n      setDecimalCount(0);\n      setEnterCount(1);\n      setMonitorText(total);\n    }\n  }\n\n  const onClickTask = (type,value) => {\n    switch(type){\n      case 'number': fnCurrentNumber(value);break;\n      case 'decimal': fnDecimal(value);break;\n      case 'operator': fnOpertor(value);break;\n      case 'enter': fnCalculation();break;\n      case 'delete': fnCalculation();break;\n    }\n    \n  }\n\nconst renderButtons = buttonTexts.map((obj,index) => <Button key = {index} value={obj.value} type = {obj.type} onClickTask={onClickTask}/>);\n\n\n\n  return(\n    <>\n    \n      <div className = \"calculator\">\n        <Monitor display = {monitorText}/>\n        <div className = \"ui inverted segment\">\n         {renderButtons}\n         </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}